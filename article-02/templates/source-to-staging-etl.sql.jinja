{# Define funcionality to quote and join lists of names #}
{% macro q(names) -%}
[{{ names|join('].[') }}]
{%- endmacro %}

{# Define a macro to put commas ',' before items in a loop,
   except before the first item #}
{% macro c(loop) -%}
{{ '  ' if loop.index0 == 0 else ', ' }}
{%- endmacro %}

{# Define a macro that returns the value for a column from a column mapping #}
{% macro colval(mapping) -%}
{{ q([mapping.source_column.name]) if mapping.source_column else mapping.expression  }}
{%- endmacro %}

{# Loop trough all schema mappings and create SQL ETL statements -#}
{% for schema_mapping in schema_mappings %}

{# Loop trough all table mappings and create SQL ETL statements -#}
{% for table_mapping in schema_mapping.table_mappings %}
-- Load table {{ schema_mapping.target_schema.name }}.{{ table_mapping.target_table.name }}
CREATE OR ALTER PROCEDURE {{ q([schema_mapping.target_schema.name, "usp_load" + table_mapping.target_table.name]) }} (
  @stg_runId uniqueIdentifier
, @stg_timestamp_utc datetime
)
AS
BEGIN
  INSERT INTO {{ q([schema_mapping.target_schema.name, table_mapping.target_table.name]) }} (
  {% for column_mapping in table_mapping.column_mappings -%}
  {{ c(loop) }}{{ q([column_mapping.target_column.name]) }}
  {% endfor -%}
  )
  SELECT
  {% for column_mapping in table_mapping.column_mappings -%}
  {{ c(loop) }}{{ colval(column_mapping) }}
  {% endfor -%}
  FROM 
    {{ q([schema_mapping.source_schema.name, table_mapping.source_table.name]) }}
  ;
END
;
GO
{% endfor %}

{% endfor %}